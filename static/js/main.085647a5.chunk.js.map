{"version":3,"sources":["services/ApiService.js","actions/categories.js","reducers/categories.js","actions/questions.js","reducers/questions.js","reducers/index.js","components/Header.js","pages/Categories.js","components/Level.js","components/Modal.js","pages/Trivia.js","pages/Report.js","App.js","serviceWorker.js","index.js"],"names":["CATEGORIES_URL","QUESTION_URL","a","axios","get","resp","data","trivia_categories","getQuestions","category_id","difficulty","replace","results","CATEGORIES","categories","list","dispatch","getCategories","then","type","state","action","QUESTIONS","ANSWER","CLEAR_QUESTIONS","questions","answers","map","question","options","incorrect_answers","correct_answer","sort","Math","random","answer","combineReducers","Header","Component","Categories","this","props","length","className","category","key","id","to","name","connect","Level","levels","easy","stars","text","medium","hard","level","Modal","correct","next","onClick","autoFocus","MAX_QUESTIONS","MEDIUM","Trivia","selected_answer","question_index","filter","selectAnswer","e","setState","target","value","submit","preventDefault","date_time","Date","answerQuestion","close","history","push","form","current","reset","calcFilter","console","log","next_filter","last","nexttolast","Promise","all","q","href","dangerouslySetInnerHTML","__html","ref","createRef","onChange","onSubmit","option","btoa","disabled","withRouter","Report","App","path","exact","render","match","params","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sWAGMA,EAAc,UADC,sBACD,qBACdC,EAAY,UAFG,sBAEH,gF,2CAEX,4BAAAC,EAAA,qEACeC,IAAMC,IAAIJ,GADzB,cACCK,EADD,yBAEEA,EAAKC,KAAKC,mBAFZ,0C,sBAKA,SAAeC,EAAtB,oC,2CAAO,WAA4BC,EAAaC,GAAzC,eAAAR,EAAA,qEACeC,IAAMC,IAAIH,EAC3BU,QAAQ,eAAgBD,GACxBC,QAAQ,aAAcF,IAHpB,cACCJ,EADD,yBAIEA,EAAKC,KAAKM,SAJZ,0C,sBCTA,IAAMC,EAAa,oBAEnB,SAASC,EAAWC,GACzB,OAAO,SAASC,IDCX,WAAP,gCCAIC,GAAgBC,KAAK,SAAAJ,GACnBE,EAAS,CAAEG,KAAMN,EAAYE,KAAMD,OCLzC,IASeA,EATI,WAAyC,IAAxCM,EAAuC,uDAA/B,CAAEN,WAAY,IAAMO,EAAW,uCACzD,OAAOA,EAAOF,MACZ,KAAKN,EACH,MAAO,CAAEC,WAAYO,EAAON,MAC9B,QACE,OAAOK,I,wBCLAE,EAAY,mBACZC,EAAS,gBACTC,EAAkB,yB,mjBCF/B,IAoBeC,EApBG,WAAqD,IAApDL,EAAmD,uDAA3C,CAAEK,UAAW,GAAIC,QAAS,IAAML,EAAW,uCACpE,OAAOA,EAAOF,MACZ,KAAKG,EACH,IAAMG,EAAYJ,EAAOI,UAAUE,IAAI,SAAAC,GACrC,IAAMC,EAAWD,EAASE,mBAAqBF,EAASG,eAAxC,sBACVH,EAASE,mBADC,CACkBF,EAASG,iBAAkB,GAE7D,OADAF,EAAQG,KAAK,kBAAMC,KAAKC,SAAW,KAC5B,EAAP,GAAWN,EAAX,CAAqBC,cAEvB,OAAO,EAAP,GAAYT,EAAZ,CAAmBK,cACrB,KAAKF,EACH,IAAMG,EAAO,sBAAON,EAAMM,SAAb,CAAsBL,EAAOc,SAC1C,OAAO,EAAP,GAAYf,EAAZ,CAAmBM,YACrB,KAAKF,EACH,MAAO,CAAEC,UAAW,GAAIC,QAAS,IACnC,QACE,OAAON,ICdEgB,cAAgB,CAC7BtB,aACAW,c,mDCOaY,G,uLARX,OACE,gCACE,8C,GAJaC,cCEfC,E,4LAGFC,KAAKC,MAAMzB,SAASF,O,+BAGZ,IACAA,EAAe0B,KAAKC,MAApB3B,WAER,OACE,kBAAC,WAAD,KACE,0CACuB,IAAtBA,EAAW4B,QAAgB,gBAC5B,yBAAKC,UAAU,cACZ7B,EAAWa,IAAI,SAAAiB,GAAQ,OACtB,kBAAC,IAAD,CAAMD,UAAU,OAAOE,IAAKD,EAASE,GAAIC,GAAI,WAAaH,EAASE,IAAKF,EAASI,c,GAfpEV,aAuBVW,cAAQ,qBAAGnC,YAAXmC,CAAwCV,GCJxCW,G,iNAnBbC,OAAS,CACPC,KAAM,CAAEC,MAAO,qBAAOC,KAAM,YAC5BC,OAAQ,CAAEF,MAAO,qBAAOC,KAAM,YAC9BE,KAAM,CAAEH,MAAO,qBAAOC,KAAM,e,wEAGpB,IACA5C,EAAe8B,KAAKC,MAApB/B,WACF+C,EAAQjB,KAAKW,OAAOzC,IAAe,GAEzC,OACE,yBAAKiC,UAAU,SACb,0BAAMA,UAAU,eAAec,EAAMJ,OACpCI,EAAMH,U,GAfKhB,c,MCaLoB,MAbf,YAAmC,IAAlBC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KACxB,OACE,kBAAC,WAAD,KACE,yBAAKjB,UAAU,kBACf,yBAAKA,UAAW,WAAagB,GAAW,QACtC,uBAAGhB,UAAU,eACb,4BAAKgB,EAAU,mBAAkB,kBACjC,4BAAQE,QAASD,EAAME,WAAS,GAAhC,cAAyC,yC,4NCHjD,IAAMC,EAAgB,GAEhBC,EAAS,SAGTC,E,2MAEJ7C,MAAQ,CACN8C,gBAAiB,KACjBC,eAAgB,EAChBR,QAAS,KACTS,OAAQJ,G,EAGVK,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEL,gBAAiBI,EAAEE,OAAOC,S,EAG5CC,OAAS,SAACJ,EAAG1C,GACX0C,EAAEK,iBACF,IAAMhB,EAAU,EAAKvC,MAAM8C,kBAAoBtC,EAASG,eACxD,EAAKwC,SAAS,CAAEZ,YAEhB,IAAMxB,E,qVAAM,IACPP,EADO,CAEVsC,gBAAiB,EAAK9C,MAAM8C,gBAC5BP,UACAiB,UAAW,IAAIC,OAEjB,EAAKpC,MAAMzB,SPdR,SAAwBmB,GAC7B,MAAO,CAAEhB,KAAMI,EAAQY,UOaD2C,CAAe3C,K,EAGrC4C,MAAQ,SAACT,GACPA,EAAEK,iBACF,EAAKlC,MAAMuC,QAAQC,KAAK,M,EAG1BrB,KAAO,SAACU,GACNA,EAAEK,iBADU,IAEJR,EAAmB,EAAK/C,MAAxB+C,eACY,EAAK1B,MAAjBf,QAEIgB,OAASqB,GACnB,EAAKmB,KAAKC,QAAQC,QAClB,EAAKb,SAAS,CACZL,gBAAiB,KACjBC,eAAgBA,EAAiB,EACjCR,QAAS,KACTS,OAAQ,EAAKiB,gBAIfC,QAAQC,IAAI,Y,4EAIF,IACJ7D,EAAYc,KAAKC,MAAjBf,QACJ8D,EAAchD,KAAKpB,MAAMgD,OAE7B,GAAI1C,EAAQgB,OAAS,EAAG,CACtB,IAAM+C,EAAO/D,EAAQA,EAAQgB,OAAO,GAC9BgD,EAAahE,EAAQA,EAAQgB,OAAO,IAErB,IAAjB+C,EAAK9B,UAA2C,IAAvB+B,EAAW/B,QA/DjC,SAgED8B,EAAK/E,YAhEJ,SAgE2BgF,EAAWhF,WACzC8E,EAAcxB,EAEPyB,EAAK/E,aAAesD,GAAU0B,EAAWhF,aAAesD,IAC/DwB,EAlEG,SAqEmB,IAAjBC,EAAK9B,UAA4C,IAAvB+B,EAAW/B,UArEvC,SAsED8B,EAAK/E,YAtEJ,SAsE2BgF,EAAWhF,WACzC8E,EAAcxB,EAEPyB,EAAK/E,aAAesD,GAAU0B,EAAWhF,aAAesD,IAC/DwB,EA5EG,SAiFT,OAAOA,I,0CPnFJ,IAAmB/E,EOuFtB+B,KAAKC,MAAMzB,UPvFWP,EOuFQ+B,KAAKC,MAAMG,SPtFpC,SAAS5B,GACd2E,QAAQC,IAAI,CACVpF,EAAaC,EAAa,QAC1BD,EAAaC,EAAa,UAC1BD,EAAaC,EAAa,UACzBS,KAAK,YAA6B,IAAD,mBAAzBkC,EAAyB,KAAnBG,EAAmB,KAAXC,EAAW,KAClCxC,EAAS,CAAEG,KAAMG,EAAWG,UAAU,GAAD,mBAAO2B,GAAP,YAAgBG,GAAhB,YAA2BC,a,6COoFlEhB,KAAKC,MAAMzB,SP9EN,CAAEG,KAAMK,M,+BOiFL,IAAD,SACsDgB,KAAKpB,MAA1D8C,EADD,EACCA,gBAAiBC,EADlB,EACkBA,eAAgBR,EADlC,EACkCA,QAASS,EAD3C,EAC2CA,OAE5CxC,EADgBY,KAAKC,MAAnBhB,UACmB2C,OAAO,SAAAyB,GAAC,OAAIA,EAAEnF,aAAe0D,IAAQD,IAAmB,GAEnF,OAAQvC,EAASA,SACf,kBAAC,WAAD,KACE,uBAAGkE,KAAK,SAASjC,QAASrB,KAAKuC,OAAO,qCAAtC,WACA,4BAAKnD,EAASgB,UACd,iCACE,kBAAC,EAAD,CAAOlC,WAAYkB,EAASlB,aAC5B,0CAAayD,EAAiB,GAE9B,uBAAG4B,wBAAyB,CAAEC,OAAQpE,EAASA,YAC/C,0BAAMe,UAAU,UAAUsD,IAAKzD,KAAK0C,KAAOgB,sBACzCC,SAAU3D,KAAK6B,aACf+B,SAAU,SAAA9B,GAAC,OAAI,EAAKI,OAAOJ,EAAG1C,KAC7BA,EAASC,SAAWD,EAASC,QAAQF,IAAI,SAAA0E,GAAM,OAC9C,2BAAOxD,IAAKyD,KAAKD,IACf,2BAAOlF,KAAK,QAAQ6B,KAAK,SAASyB,MAAO4B,IACzC,0BAAMN,wBAAyB,CAAEC,OAAQK,QAG7C,4BAAQlF,KAAK,SAASoF,UAAWrC,GAAjC,aACa,OAAZP,GAAoB,kBAAC,EAAD,CAAOA,QAASA,EAASC,KAAMpB,KAAKoB,UAnBrC,oB,GA7FXtB,aAwHNW,cAAQ,qBAAGxB,WAAXwB,CAAsCuD,YAAWvC,ICxHjDwC,E,iLARX,OACE,2C,GAHenE,aCyBNoE,G,uLAjBX,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,OAAQ,kBAAM,kBAAC,EAAD,SACpC,kBAAC,IAAD,CAAOF,KAAK,oBAAoBE,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OACtC,kBAAC,EAAD,CAAQlE,SAAUkE,EAAMC,OAAOnE,cAEjC,kBAAC,IAAD,CAAO+D,KAAK,UAAUE,OAAQ,kBAAM,kBAAC,EAAD,gB,GAX9BvE,cCIZ0E,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASN,MACvB,4DAsCN,SAASO,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTpG,KAAK,SAAAyG,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzG,QACfoG,UAAUC,cAAcO,YAI1B1C,QAAQC,IACN,iHAKEgC,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBrC,QAAQC,IAAI,sCAGRgC,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,UAO5BQ,MAAM,SAAAC,GACL9C,QAAQ8C,MAAM,4CAA6CA,KCtFjE,IAAMC,GAAQC,YAAYC,EAAUC,YAAgBC,MAEpDC,IAAS7B,OACP,kBAAC,IAAD,CAAUwB,MAAOA,IACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SDMnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,oDAAwB5B,OAAOC,SAASrB,MACpDiD,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,OAAQ,WAC9B,IAAM1B,EAAK,UAAMwB,oDAAN,sBAEP9B,IAgEV,SAAiCM,EAAOC,GAEtC0B,MAAM3B,GACHpG,KAAK,SAAAgI,GAEJ,IAAMC,EAAcD,EAASE,QAAQhJ,IAAI,gBAEnB,MAApB8I,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAMrI,KAAK,SAAAyG,GACjCA,EAAa6B,aAAatI,KAAK,WAC7BgG,OAAOC,SAASsC,aAKpBpC,EAAgBC,EAAOC,KAG1BY,MAAM,WACL7C,QAAQC,IACN,mEArFAmE,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAMrI,KAAK,WACjCoE,QAAQC,IACN,gHAMJ8B,EAAgBC,EAAOC,MC/B/BE,K","file":"static/js/main.085647a5.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'https://opentdb.com';\nconst CATEGORIES_URL = `${API_BASE_URL}/api_category.php`;\nconst QUESTION_URL = `${API_BASE_URL}/api.php?amount=10&difficulty={difficulty}&type=multiple&category={category}`;\n\nexport async function getCategories() {\n  const resp =  await axios.get(CATEGORIES_URL);\n  return resp.data.trivia_categories;\n}\n\nexport async function getQuestions(category_id, difficulty) {\n  const resp =  await axios.get(QUESTION_URL\n    .replace('{difficulty}', difficulty)\n    .replace('{category}', category_id));\n  return resp.data.results;\n}\n","import { getCategories } from '../services/ApiService';\n\nexport const CATEGORIES = 'CATEGORIES_ACTION';\n\nexport function categories(list) {\n  return function(dispatch) {\n    getCategories().then(categories => {\n      dispatch({ type: CATEGORIES, list: categories })\n    });\n  }\n}\n","import { CATEGORIES } from '../actions/categories.js';\n\nconst categories = (state = { categories: [] }, action) => {\n  switch(action.type) {\n    case CATEGORIES:\n      return { categories: action.list };\n    default:\n      return state;\n  }\n}\n\nexport default categories;\n","import { getQuestions } from '../services/ApiService';\n\nexport const QUESTIONS = 'QUESTIONS_ACTION';\nexport const ANSWER = 'ANSWER_ACTION';\nexport const CLEAR_QUESTIONS = 'CLEAR_QUESTIONS_ACTION';\n\nexport function questions(category_id, difficulty) {\n  return function(dispatch) {\n    Promise.all([\n      getQuestions(category_id, 'easy'),\n      getQuestions(category_id, 'medium'),\n      getQuestions(category_id, 'hard')\n    ]).then(([ easy, medium, hard ]) => {\n      dispatch({ type: QUESTIONS, questions: [ ...easy, ...medium, ...hard ] })\n    });\n  }\n}\n\nexport function clearQuestions() {\n  return { type: CLEAR_QUESTIONS };\n}\n\nexport function answerQuestion(answer) {\n  return { type: ANSWER, answer };\n}\n\n","import { QUESTIONS, ANSWER, CLEAR_QUESTIONS } from '../actions/questions.js';\n\nconst questions = (state = { questions: [], answers: [] }, action) => {\n  switch(action.type) {\n    case QUESTIONS:\n      const questions = action.questions.map(question => {\n        const options = (question.incorrect_answers && question.correct_answer) ?\n          [...question.incorrect_answers, question.correct_answer] : [];\n        options.sort(() => Math.random() - 0.5); // Shuffle\n        return {...question, options };\n      });\n      return { ...state, questions };\n    case ANSWER:\n      const answers = [...state.answers, action.answer];\n      return { ...state, answers };\n    case CLEAR_QUESTIONS:\n      return { questions: [], answers: [] };\n    default:\n      return state;\n  }\n}\n\nexport default questions;\n","import { combineReducers } from 'redux';\nimport categories from './categories';\nimport questions from './questions';\n\nexport default combineReducers({\n  categories,\n  questions\n});\n","import React, { Component } from 'react';\nimport './Header.scss';\n\nclass Header extends Component {\n  render() {\n    return (\n      <header>\n        <h1>Questions</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { categories } from '../actions/categories';\n\nclass Categories extends Component {\n\n  componentDidMount() {\n    this.props.dispatch(categories());\n  }\n\n  render() {\n    const { categories } = this.props;\n\n    return (\n      <Fragment>\n        <h1>Categorias</h1>\n        {categories.length === 0 && 'Carregando...'}\n        <div className='card-group'>\n          {categories.map(category =>\n            <Link className='card' key={category.id} to={'/trivia/' + category.id}>{category.name}</Link>\n          )}\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default connect(({ categories }) => categories)(Categories);\n","import React, { Component } from 'react';\nimport './Level.scss';\n\nclass Level extends Component {\n\n  levels = {\n    easy: { stars: '★☆☆', text: 'Fácil' },\n    medium: { stars: '★★☆', text: 'Médio' },\n    hard: { stars: '★★★', text: 'Difícil' },\n  }\n\n  render() {\n    const { difficulty } = this.props;\n    const level = this.levels[difficulty] || {};\n\n    return (\n      <div className='level'>\n        <span className='level-stars'>{level.stars}</span>\n        {level.text}\n      </div>\n    );\n  }\n}\n\nexport default Level;\n","import React, { Fragment } from 'react';\nimport './Modal.scss';\n\nfunction Modal({ correct, next }) {\n  return (\n    <Fragment>\n      <div className='modal-overlay' />\n      <div className={'modal ' + (!correct && 'red')}>\n        <i className='modal-icon' />\n        <h2>{correct ? 'Você acertou!' : 'Você errou!'}</h2>\n        <button onClick={next} autoFocus>Avançar <i>→</i></button>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Modal;\n\n","import React, { Component, Fragment, createRef } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { questions, clearQuestions, answerQuestion } from '../actions/questions';\nimport Level from '../components/Level'\nimport Modal from '../components/Modal'\n\nconst MAX_QUESTIONS = 10;\nconst EASY = 'easy';\nconst MEDIUM = 'medium';\nconst HARD = 'hard';\n\nclass Trivia extends Component {\n\n  state = {\n    selected_answer: null,\n    question_index: 0,\n    correct: null,\n    filter: MEDIUM\n  }\n\n  selectAnswer = (e) => {\n    this.setState({ selected_answer: e.target.value });\n  }\n\n  submit = (e, question) => {\n    e.preventDefault();\n    const correct = this.state.selected_answer === question.correct_answer;\n    this.setState({ correct });\n\n    const answer = {\n      ...question,\n      selected_answer: this.state.selected_answer,\n      correct,\n      date_time: new Date()\n    };\n    this.props.dispatch(answerQuestion(answer));\n  }\n\n  close = (e) => {\n    e.preventDefault();\n    this.props.history.push('/');\n  }\n\n  next = (e) => {\n    e.preventDefault();\n    const { question_index } = this.state;\n    const { answers } = this.props;\n\n    if (answers.length < MAX_QUESTIONS) {\n      this.form.current.reset();\n      this.setState({\n        selected_answer: null,\n        question_index: question_index + 1,\n        correct: null,\n        filter: this.calcFilter()\n      });\n    }\n    else {\n      console.log('The end');\n    }\n  }\n\n  calcFilter() {\n    const { answers } = this.props;\n    let next_filter = this.state.filter;\n\n    if (answers.length > 1) {\n      const last = answers[answers.length-1];\n      const nexttolast = answers[answers.length-2];\n\n      if (last.correct === true && nexttolast.correct === true) {\n        if (last.difficulty === EASY && nexttolast.difficulty === EASY) {\n          next_filter = MEDIUM;\n        }\n        else if (last.difficulty === MEDIUM && nexttolast.difficulty === MEDIUM) {\n          next_filter = HARD;\n        }\n      }\n      else if (last.correct === false && nexttolast.correct === false) {\n        if (last.difficulty === HARD && nexttolast.difficulty === HARD) {\n          next_filter = MEDIUM;\n        }\n        else if (last.difficulty === MEDIUM && nexttolast.difficulty === MEDIUM) {\n          next_filter = EASY;\n        }\n      }\n    }\n\n    return next_filter;\n  }\n\n  componentDidMount() {\n    this.props.dispatch(questions(this.props.category));\n  }\n\n  componentWillUnmount() {\n    this.props.dispatch(clearQuestions());\n  }\n\n  render() {\n    const { selected_answer, question_index, correct, filter } = this.state;\n    const { questions } = this.props;\n    const question = questions.filter(q => q.difficulty === filter)[question_index] || {};\n\n    return !question.question ? 'Carregando...' : (\n      <Fragment>\n        <a href='#close' onClick={this.close}><i>ⓧ</i> Fechar</a>\n        <h2>{question.category}</h2>\n        <section>\n          <Level difficulty={question.difficulty} />\n          <h3>Questão {question_index + 1}</h3>\n          {/* Needs to use dangerouslySetInnerHTML because api returns some HTML encoded text */}\n          <p dangerouslySetInnerHTML={{ __html: question.question }} />\n          <form className='answers' ref={this.form = createRef()}\n            onChange={this.selectAnswer}\n            onSubmit={e => this.submit(e, question)}>\n            {question.options && question.options.map(option =>\n              <label key={btoa(option)}>\n                <input type='radio' name='option' value={option} />\n                <span dangerouslySetInnerHTML={{ __html: option }} />\n              </label>\n            )}\n            <button type='submit' disabled={!selected_answer}>Responder</button>\n            {correct !== null && <Modal correct={correct} next={this.next} />}\n          </form>\n        </section>\n      </Fragment>\n    );\n  }\n}\n\nexport default connect(({ questions }) => questions)(withRouter(Trivia));\n","import React, { Component } from 'react';\n\nclass Report extends Component {\n  render() {\n    return (\n      <div>\n        Report\n      </div>\n    );\n  }\n}\n\nexport default Report;\n","import React, { Component, Fragment } from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport Categories from './pages/Categories';\nimport Trivia from './pages/Trivia';\nimport Report from './pages/Report';\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Header />\n        <main>\n          <Router>\n            <Route path='/' exact render={() => <Categories />} />\n            <Route path='/trivia/:category' render={({ match }) => (\n              <Trivia category={match.params.category} />\n            )} />\n            <Route path='/report' render={() => <Report />} />\n          </Router>\n        </main>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from './reducers';\nimport App from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}